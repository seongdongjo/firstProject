create table School(

       code int not null primary key,

       name varchar(15)

);(부모)

 

create table Junior(

       stu_id int not null auto_increment primary key,

       name varchar(15),

       school_code int,

       foreign key(school_code) references School(code)

       on delete cascade

       on update cascade

);

 

create table Senior(

       stu_id int not null auto_increment primary key,

       name varchar(15),

       school_code int,

       foreign key(school_code) references School(code)

       on delete set null //부모에서 code가 삭제되면 자식의 code컬럼은 null로 바꾼다

       on update cascade

);
===============================================
#)전은지 
===============================================
-- 일부 컬럼만 가져오기
select title, from_date, to_date from employees;

--특정 컬럼에 연산자 사용
//salary+1000의 컬럼이 생긴다
select salary + 1000 from salaries; 

--10%인상
select emp_no, salary * 1.1 from salaries;

--가져온 결과에서 중복을 제거
select distinct dept_no from dept_emp;

--조건식
select emp_no, dept_no from dept_manager where dept_no = 'd005';

--아닌 조건식
select emp_no, dept_no from dept_manager where dept_no <> 'd003';
select emp_no, dept_no from dept_manager where not dept_no = 'd003';

--1986년 이후에 입사한 사원정보 가져오기
select emp_no, hire_date, first_name, last_name from employees where hire_date >= '1986-01-01';

--and 조건
select emp_no, dept_no, from_date from dept_manager where dept_no='d001' and from_date >= '1990-01-01';

--1990년 이후에 입사한 남자 사원의 사원번호, 성별, 입사일을 가져온다
select emp_no, gender, hire_date from employees where hire_date >= '1990-01-01' and gender='M';

--직함이 Staff 와 Engineer인 사원의 사원번호, 직함을 가져온다
select emp_no, title from titles where title = 'Staff' of title = 'Engineer';

--급여가 60000이상 70000미만
방법1) select emp_no, salary from salaries where salary >= 60000 and salary<70000;
방법2) select emp_no, salary from salaries where salary between 60000 and 69999;


-- d001부서와 d002부서 매니저의 사원번호, 부서번호를 가져온다
방법1) select emp_no, dept_no from dept_manager where dept_no = 'd001' or dept_no = 'd002';
방법2) select emp_no, dept_no from dept_manager where dept_no in('d001', 'd002');


--이름이 Tommaso 사원의 사원번호, 이름을 가져온다
select emp_no, first_name from employees where first_name = 'Tommaso';

--이름의 첫글자가 A로 시작하는 사원의 사원번호, 이름을 가져온다
select emp_no, first_name from employees where first_name like 'A%';

--이름의 마지막글자가 s로 끝나는
select emp_no, first_name from employees where first_name like '%s';

--이름의 두번째글자가 i인 
select emp_no, first_name from employees where first_name like '_i%';

--이름에 o가 포함되어
select emp_no, first_name from employees where first_name like '%o%';

--이름에 o가 포함되어있고 마지막글자가 o가 아닌 사원만
select emp_no, first_name from employees where first_name like '%o%' and not first_name like '%o';

--이름이 5글자인 
select emp_no, first_name from employees where first_name like'_____';

--급여를 기준으로 오름차순 정렬
select emp_no, salary from salaries order by salary asc;  //asc는 생략가능, desc는 생략불가

--숫자함수
select ceil(10.1), ceil(10.8)  -> 11로 (소수점 이하 올림)
select floor(10.1), floor(10.4) -> 10 (소수점 이하 버림)
select round(10.1), round(10.5) -> 10, 11(반올림)

select round(166.555,0), round(166.555.1), round(166.555, -1) 
-> 0은 소수점첫쨰자리(167) ,   1은 소수점 둘째(166.6) , -1은 진행방향 반대로해서 반올림(167)

--truncate는 소수점 버림
select truncate(166.555,0), truncate(166.555,1), truncate(166.555,-1)
-> 166, 165.5 160

--x의 y승
select pow(10,2);

--나머지 구하기
select mod(10,3);

--가장 큰 숫자
select greatest(10,4,20,1); //최소는 least로구하기

select emp_no, salary * 1.1, ceil(salary * 1.1), floor(salary * 1.1), round(salary * 1.1,0) from salaries;

--문자열
select concat('aaa', 'bbb','ccc'); -> aaabbbccc

select insert('aaaaa',2,2,'bbb');  -> 2번쨰 인덱스부터 2개 제거 후 bbb넣기 -> abbbaa
select insert('aaaaa',2,0,'bbb');  -> abbbaaaa

select replace('aabbcc', 'bb', 'ff'); -> bb를 ff로 바꾼다

select instr('abcdefg', 'cde'); //cde가 있는 위치 3

select instr('abcdefg', 'kkk'); //없으면 0


======================================
select left('abcdefg', 3); -> abc 왼쪽에서부터 3개가져온다
       right

select mid('abcdefg',3,3); // 인덱스 3번째부터 3글자 -> cde

select substring("abcdefg',3,3); //cde

--LTRIM(문자열) : 문자열의 좌측공백을 제거
--RTRIM(문자열) : 문자열의 우측공백을 제거
--TRIM(문자열)  : 문자열의 좌우측 공백을 제거

--공백을 일부러 추가했다
select concat('[','     abc     ',']'); -> [     abc     ]
select concat('[', ltrim('     abc     '),']');  -> [abc     ]
select concat('[', rtrim('     abc     '),']');  -> [     abc]
select concat('[', trim('     abc     '),']');  -> [abc]

--소문자 
방법1) select lcase('abCDef'); -> abcdef
방법2) select lower('abCDef'); -> abcdef

--대문자 (ucase, upper)

--뒤집기
select reverse('abcdef'); -> fedcba

--사원의 이름을 성과 이름을 하나의 문자열로 가져온다
select concat(firstname,' ',last_name) from employees; ->jo seongdong

--소문자
select lower(concat(firstname,' ',last_name)) from employees; ->jo seongdong

====================================
--날짜함수
//결과는 같다, 현재날짜와 시간반환
select now(); 
select sysdate();
select current_timestamp();

//현재날짜만
select curdate();
select current_date();

//현재시간
select curtime();
select current_time();

//날짜더하기 now()는 현재시간과 비교하기위해 출력해봄
select now(), date_add(now(), interval 100 day);

//사원의 입사 100일후
select hire_date, date_add(hire_date,interval 100 day) from employees;

//날짜 빼기
select now(),date_sub(now(), interval 100 day); //1986-06-26 

--날짜함수                           now()            year(now())
select now(), year(now()); -> 2017-08-10 20:27:13     2017

select now(), month(now());

select now(), monthname(now()); -> 2017-08-10 20:27:13  August

select now, dayname(now());  -> 2017-08-10 20:27:13  Thursday

select now(), dayofweek(now());  -> 일요일이 1이라서 목요일은 5이다
select now(), weekday(now());  ->  월요일부터 0 이라서 3이나온다

select now(), dayofyear(now());  -> 이변년 1월1일부터 오늘날까지 몇일인가

select now(), week(now());   -> 이번년부터 오늘 몇번째 주인지

select from_days(1000);  ->  0000년01월01일 부터 1000일 계산

select now(), date_format(now(), '%Y년 %m월 %d일 %H시 %i분 %S초');


================================================

--그룹함수
//사원의 수를 구한다
select count(*) from employees; //row의 개수구한다


//남자 사원 수 구하자
select count(*) from employees where gender='M';

//현재받고있는 급여의 총합
select sum(salary) from salaries where to_date='9999-01-01';

//현재받고있는 급여의 평균
select avg(salary) from salaries where to_date='9999-01-01';

//현재받고있는 급여 최고액
select max(salary) from salaries where to_date='9999-01-01'; 

===================================================
#)사원의 수를 성별을 기준으로 가져온다 (M이 하나의 그룹, F가 하나의 그룹)
select gender, count(*) from employees group by gender;  
-> gender count(*) 
     M     11    
     F     13

#)각 부서(dept_no)에 근무하고 있는 사원들의 수를 가져온다
select dept_no, count(*) from dept_emp where to_date="9999-01-01" group by dept_no;

#)각 부서별 과거의 매니저의 수를 구한다
select dept_no, count(*) from dept_manager where to_date <> '9999-01-01' group by dept_no;

#)급여 수령 시작일별 급여 총합을 구한다(min,avg,max 가능)
select from_date, sum(salary) from salaries group by from_date;


//group by 로 나눈 후 having절로 만든 조건에 맞는 그룹의 데이터만 가져올 수 있다
#)10만명 이상이 사용하고 있는 직함의 이름과 직원의 수를 가져온다
select title, count(*) from titles group by title having count(*) >= 100000;

#)5만명 이상이 근무하고 있는 부서의 부서번호와 소속사원들의 수를 가져온다(dept_emp는 사원테이블이다)
select dept_no, count(*) from dept_emp group by dept_no having count(*) >= 50000;

============================================================
#)조인
고객 한명이 여러 상품을 구매할 수있고 같은 상품을 여러 사람이 구매할 수도 있어서 데이터가 상당히 중복된다.
그래서 중복을 최소화하기 위해 테이블을 분리하고 데이터를 가져올 때 여러 테이블을 하나의 결과로 가져오기 위해 join문을 사용한다

즉, join문을 쓰면 여러 테이블의 데이터를 한번에 가져올 수 있다



#)각 사원들의 사원번호, 근무 부서 번호, 근무 부서 이름을 가져온다 사원번호를 기준으로 오름차순 정렬
//하나의 테이블에 원하는 정보가 다 없기 때문에 조인쓰자

select dept_emp.emp_no, dept_emp.dept_no, departments.dept_name from departmetns, dept_emp;

select a2.emp_no, a2.dept_no, a1_dept_name 
from departments a1, dept_emp a2 
where a1.dept_no = a2.dept_no
order by a2.emp_no;

#)각 사원들의 사원번호, first_name, 근무부서번호를 가져온다 -> 사원테이블과 근무부서정보테이블에서 공통분모를 찾아내야한다
select a1.emp_no, a1.first_name, a2.dept_no from employees a1, dept_emp a2
where a1.emp_no = a2.emp_no;


#)각 사원들의 사원번호, first_name, 현재받고있는 급여를 가져온다
select a1.emp_no, a1.first_name, a2.salary from employees a1, salaries a2
where a1.emp_no = a2.emp_no and a2.to_date = '9999-01-01';

#)각 사원들의 사원번호, first_name, 근무부서이름을 가져온다(employees와 departments가 공통분모가 없다 근데 근무부서테이블(dept_emp)에 employ공통분모 emp_no, departments에 공통분모 dept_no가있다)
select a1.emp_no, a1.first_name, a3.dept_name from employees a1, dept_emp a2, departments a3
where a1.emp_no = a2.emp_no and a2.dept_no = a3.dept_no;

============================================4
//서브쿼리
#)현재 사람들이 받는 급여의 평균보다 많이 받는 사람들의 사원번호, 급여액을 가져온다
select emp_no, salary from salaries where salary > (select avg(salary) from salaries where to_date='9999-01-01');

//아래처럼 조인으로 작성도 가능하고, 서브쿼리도 가능하다(단, 하나의 테이블에서 가져와야한다. a1에서 select해서 가져오기때문에 a1.emp_no, a1.first_name) 
#)d001부서에 근무하고있는 사원들의 사원번호와 first_name을 가져온다 -> dept, emp 가 emp_no를 공통으로 가진다
select a1.emp_no, a1.first_name from employees a1, dept_emp a2 where a1.emp_no = a2.emp_no and a2.dept_no = 'd001';

//서브쿼리로 작성
select emp_no, first_name from emplyees where emp_no in(select emp_no from dept_emp where dept_no='d001');

#)1960년 이후에 태어난 사원들이 근무하고 있는 사원들의 사원번호, 근무 부서 번호를 가져온다
select emp_no, dept_no from dept_emp where emp_no in(select emp_no from employees where birth_date >= '1960-01-01');

===============================================
#)합집합
union : 중복되는 데이터를 하나만 가져온다
union all : 중복데이터도 가져온다

select emp_no from titles where title='Senior Staff'
union
select emp_no from titles where title='Staff';

#)차집합
두 select문 에서 중복되는 부분을 제거하고 첫번째 select문 결과만 가져온다

select emp_no from titles where title='Staff' and emp_no not in(select emp_no from titles where title='Senior Staff');


===========================================
#)ORACle
컬럼값이 null인것과 연산하면(더하거나) 해당 결과가 null(무한대 의미)이나온다.
그래서 nvl함수이용 select sal, nvl(comm, 0), sal + nvl(comm,0) from emp; -> comm컬럼에 null이 있으면 0을 쓰겠다

#)문자열 합치는 연산자 => concat
--000사원의 담당 직무는 xxx입니다.
select ename || '사원의 담당 직무는' || job || '입니다' from emp;
--> SMITH사원의 담당 직무는 CLERK입니다
-->  ...

#)사원들이 근무하고 있는 근무 부서의 번호는 가져온다
select distinct deptno from emp;

select ename, job, ename || job, ename || '/' || job from emp where emp in (7369,7566);

#)입사년도가 1981년인 사원중에 급여가 1500이상인 사원의 사원번호, 이름, 급여, 입사일을 가져온다
select empno, ename, sal from emp where hiredate >= '1981/01/01' and hiredate <= '1981/12/31' and sal >= 1500;

select empno, ename, sal from emp where hiredate between '1981/01/01' and '1981/12/31' and sal >= 1500;

#)급여가 2000보다 크거나 1000보다 작은 사원의 사원번호, 이름, 급여를 가져온다
select empno, ename, sal from emp where sal > 2000 or sal < 1000;
select empno, ename, sal from emp where not(sal >= 1000 and sal <= 2000);
select empno, ename, sal from emp where not(sal between 1000 and 2000);

#)직무가 clerk, salesman, analyst인 사원의 사원번호, 이름, 직무를 가져온다. 
select empno, ename, job from emp where job in ('clerk', 'salesman', 'analyst');  --> or로도 가능

#)
select empno, ename from emp where not(empno = 7499 or empno = 7566 or empno = 7839);
select empno, ename from emp where not(empno in(7499, 7566, 7839));

-----------------------------------------------------------------------------------------
drop sequence todo_seq
drop table todo;

create sequence todo_seq
	start with 1
	maxvalue 999999999
	increment by 1
	nocache
 	nocycle;

create table todo (
	idx number default todo_seq.nextval primary key,
	title varchar2(100) not null,
	content varchar2(500) not null,
	tdate date not null
);

insert into todo (title, content, tdate) values (
	'신정', '낮잠', '2022/01/01'
);

insert into todo (title, content, tdate) values (
	'휴가', '낮잠', '2022/01/04'
);

insert into todo (title, content, tdate) values (
	'프로젝트시작', '기획 및 설계, 회의', '2022/01/05'
);

commit;

select * from todo;

desc todo;
========================================================================================================




























